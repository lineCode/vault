swagger: "2.0"
info:
  title: HashiCorp Vault API
  description: |
    The Vault HTTP API gives you full access to Vault via HTTP. Every aspect of Vault can be controlled via this API. The Vault CLI uses the HTTP API to access Vault. You can read more about the Vault API at: https://www.vaultproject.io/api/index.html
  version: 0.10.0
  contact:
    name: HashiCorp Vault
    url: https://www.vaultproject.io
  license:
    name: Mozilla Public License 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0

paths:
  /aws/config/lease:
    get:
      summary: "Configure the default lease information for generated credentials."
      description: "This configures the default lease information used for credentialsgenerated by this backend. The lease specifies the duration that acredential will be valid for, as well as the maximum session fora set of credentials.The format for the lease is \"1h\" or integer and then unit. The longestunit is hour."
      produces:
        - application/json
      tags:
        - aws
      responses:
        200:
          description: OK
    
    put:
      summary: "Configure the default lease information for generated credentials."
      description: "This configures the default lease information used for credentialsgenerated by this backend. The lease specifies the duration that acredential will be valid for, as well as the maximum session fora set of credentials.The format for the lease is \"1h\" or integer and then unit. The longestunit is hour."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              lease:
                description: "Default lease for roles."
                type: string
              lease_max:
                description: "Maximum time a credential is valid for."
                type: string
      responses:
        204:
          description: empty body
    
  /aws/config/root:
    put:
      summary: "Configure the root credentials that are used to manage IAM."
      description: "Before doing anything, the AWS backend needs credentials that are ableto manage IAM policies, users, access keys, etc. This endpoint is usedto configure those credentials. They don't necessarily need to be rootkeys as long as they have permission to manage IAM."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              access_key:
                description: "Access key with permission to create new keys."
                type: string
              iam_endpoint:
                description: "Endpoint to custom IAM server URL"
                type: string
              max_retries:
                description: "Maximum number of retries for recoverable exceptions of AWS APIs"
                type: number
              region:
                description: "Region for API calls."
                type: string
              secret_key:
                description: "Secret key with permission to create new keys."
                type: string
              sts_endpoint:
                description: "Endpoint to custom STS server URL"
                type: string
      responses:
        204:
          description: empty body
    
  /aws/creds/{name}:
    get:
      summary: "Generate an access key pair for a specific role."
      description: "This path will generate a new, never before used key pair foraccessing AWS. The IAM policy used to back this key pair will bethe \"name\" parameter. For example, if this backend is mounted at \"aws\",then \"aws/creds/deploy\" would generate access keys for the \"deploy\" role.The access keys will have a lease associated with them. The access keyscan be revoked by using the lease ID."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: name
          description: "Name of the role"
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
  /aws/roles/:
    get:
      summary: "List the existing roles in this backend"
      description: "Roles will be listed by the role name."
      produces:
        - application/json
      tags:
        - aws
      responses:
        200:
          description: OK
    
  /aws/roles/{name}:
    delete:
      summary: "Read, write and reference IAM policies that access keys can be made for."
      description: "This path allows you to read and write roles that are used tocreate access keys. These roles are associated with IAM policies thatmap directly to the route to read the access keys. For example, if thebackend is mounted at \"aws\" and you create a role at \"aws/roles/deploy\"then a user could request access credentials at \"aws/creds/deploy\".You can either supply a user inline policy (via the policy argument), orprovide a reference to an existing AWS policy by supplying the full arnreference (via the arn argument). Inline user policies written are normalIAM policies. Vault will not attempt to parse these except to validatethat they're basic JSON. No validation is performed on arn references.To validate the keys, attempt to read an access key after writing the policy."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: name
          description: "Name of the policy"
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    get:
      summary: "Read, write and reference IAM policies that access keys can be made for."
      description: "This path allows you to read and write roles that are used tocreate access keys. These roles are associated with IAM policies thatmap directly to the route to read the access keys. For example, if thebackend is mounted at \"aws\" and you create a role at \"aws/roles/deploy\"then a user could request access credentials at \"aws/creds/deploy\".You can either supply a user inline policy (via the policy argument), orprovide a reference to an existing AWS policy by supplying the full arnreference (via the arn argument). Inline user policies written are normalIAM policies. Vault will not attempt to parse these except to validatethat they're basic JSON. No validation is performed on arn references.To validate the keys, attempt to read an access key after writing the policy."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: name
          description: "Name of the policy"
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "Read, write and reference IAM policies that access keys can be made for."
      description: "This path allows you to read and write roles that are used tocreate access keys. These roles are associated with IAM policies thatmap directly to the route to read the access keys. For example, if thebackend is mounted at \"aws\" and you create a role at \"aws/roles/deploy\"then a user could request access credentials at \"aws/creds/deploy\".You can either supply a user inline policy (via the policy argument), orprovide a reference to an existing AWS policy by supplying the full arnreference (via the arn argument). Inline user policies written are normalIAM policies. Vault will not attempt to parse these except to validatethat they're basic JSON. No validation is performed on arn references.To validate the keys, attempt to read an access key after writing the policy."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: name
          description: "Name of the policy"
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              arn:
                description: "ARN Reference to a managed policy"
                type: string
              policy:
                description: "IAM policy document"
                type: string
      responses:
        204:
          description: empty body
    
  /aws/sts/{name}:
    get:
      summary: "Generate an access key pair + security token for a specific role."
      description: "This path will generate a new, never before used key pair + security token foraccessing AWS. The IAM policy used to back this key pair will bethe \"name\" parameter. For example, if this backend is mounted at \"aws\",then \"aws/sts/deploy\" would generate access keys for the \"deploy\" role.Note, these credentials are instantiated using the AWS STS backend.The access keys will have a lease associated with them, but revoking the leasedoes not revoke the access keys."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: name
          description: "Name of the role"
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "Generate an access key pair + security token for a specific role."
      description: "This path will generate a new, never before used key pair + security token foraccessing AWS. The IAM policy used to back this key pair will bethe \"name\" parameter. For example, if this backend is mounted at \"aws\",then \"aws/sts/deploy\" would generate access keys for the \"deploy\" role.Note, these credentials are instantiated using the AWS STS backend.The access keys will have a lease associated with them, but revoking the leasedoes not revoke the access keys."
      produces:
        - application/json
      tags:
        - aws
      parameters:
        - name: name
          description: "Name of the role"
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              ttl:
                description: "Lifetime of the token in seconds.AWS documentation excerpt: The duration, in seconds, that the credentialsshould remain valid. Acceptable durations for IAM user sessions range from 900seconds (15 minutes) to 129600 seconds (36 hours), with 43200 seconds (12hours) as the default. Sessions for AWS account owners are restricted to amaximum of 3600 seconds (one hour). If the duration is longer than one hour,the session for AWS account owners defaults to one hour."
                type: number
      responses:
        204:
          description: empty body
    
  /sys/audit:
    get:
      summary: "List the currently enabled audit backends."
      description: "This path responds to the following HTTP methods.    GET /        List the currently enabled audit backends.    PUT /<path>        Enable an audit backend at the given path.    DELETE /<path>        Disable the given audit backend."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/audit-hash/{path}:
    put:
      summary: "The hash of the given string via the given audit backend"
      description: ""
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The name of the backend. Cannot be delimited. Example: \"mysql\""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              input:
                description: ""
                type: string
      responses:
        204:
          description: empty body
    
  /sys/audit/{path}:
    delete:
      summary: "Enable or disable audit backends."
      description: "Enable a new audit backend or disable an existing backend."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The name of the backend. Cannot be delimited. Example: \"mysql\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    put:
      summary: "Enable or disable audit backends."
      description: "Enable a new audit backend or disable an existing backend."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The name of the backend. Cannot be delimited. Example: \"mysql\""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              description:
                description: "User-friendly description for this audit backend."
                type: string
              local:
                description: "Mark the mount as a local mount, which is not replicatedand is unaffected by replication."
                type: boolean
              options:
                description: "Configuration options for the audit backend."
                type: string
              type:
                description: "The type of the backend. Example: \"mysql\""
                type: string
      responses:
        204:
          description: empty body
    
  /sys/auth:
    get:
      summary: "List the currently enabled credential backends."
      description: "This path responds to the following HTTP methods.    GET /        List the currently enabled credential backends: the name, the type of        the backend, and a user friendly description of the purpose for the        credential backend.    POST /<mount point>        Enable a new auth method.    DELETE /<mount point>        Disable the auth method at the given mount point."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/auth/{path}:
    delete:
      summary: "Enable a new credential backend with a name."
      description: "Enable a credential mechanism at a new path. A backend can be mounted multiple times atmultiple paths in order to configure multiple separately configured backends.Example: you might have an OAuth backend for GitHub, and one for Google Apps."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The path to mount to. Cannot be delimited. Example: \"user\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    put:
      summary: "Enable a new credential backend with a name."
      description: "Enable a credential mechanism at a new path. A backend can be mounted multiple times atmultiple paths in order to configure multiple separately configured backends.Example: you might have an OAuth backend for GitHub, and one for Google Apps."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The path to mount to. Cannot be delimited. Example: \"user\""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              config:
                description: "Configuration for this mount, such as plugin_name."
                type: object
              description:
                description: "User-friendly description for this credential backend."
                type: string
              local:
                description: "Mark the mount as a local mount, which is not replicatedand is unaffected by replication."
                type: boolean
              options:
                description: "The options to pass into the backend. Should be a json object with string keys and values."
                type: string
              plugin_name:
                description: "Name of the auth plugin to use based from the name in the plugin catalog."
                type: string
              seal_wrap:
                description: "Whether to turn on seal wrapping for the mount."
                type: boolean
              type:
                description: "The type of the backend. Example: \"userpass\""
                type: string
      responses:
        204:
          description: empty body
    
  /sys/auth/{path}/tune:
    get:
      summary: "Tune the configuration parameters for an auth path."
      description: "Read and write the 'default-lease-ttl' and 'max-lease-ttl' values ofthe auth path."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "Tune the configuration parameters for an auth path."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "Tune the configuration parameters for an auth path."
      description: "Read and write the 'default-lease-ttl' and 'max-lease-ttl' values ofthe auth path."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "Tune the configuration parameters for an auth path."
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              audit_non_hmac_request_keys:
                description: "The list of keys in the request data object that will not be HMAC'ed by audit devices."
                type: array
                items:
                  type: string
              audit_non_hmac_response_keys:
                description: "The list of keys in the response data object that will not be HMAC'ed by audit devices."
                type: array
                items:
                  type: string
              default_lease_ttl:
                description: "The default lease TTL for this mount."
                type: string
              description:
                description: "User-friendly description for this credential backend."
                type: string
              listing_visibility:
                description: "Determines the visibility of the mount in the UI-specific listing endpoint."
                type: string
              max_lease_ttl:
                description: "The max lease TTL for this mount."
                type: string
              options:
                description: "The options to pass into the backend. Should be a json object with string keys and values."
                type: string
              passthrough_request_headers:
                description: "A list of headers to whitelist and pass from the request to the backend."
                type: array
                items:
                  type: string
      responses:
        204:
          description: empty body
    
  /sys/capabilities:
    put:
      summary: "Fetches the capabilities of the given token on the given path."
      description: "Returns the capabilities of the given token on the path.		The path will be searched for a path match in all the policies associated with the token."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              path:
                description: "(DEPRECATED) Path on which capabilities are being queried. Use 'paths' instead."
                type: array
                items:
                  type: string
              paths:
                description: "Paths on which capabilities are being queried."
                type: array
                items:
                  type: string
              token:
                description: "Token for which capabilities are being queried."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/capabilities-accessor:
    put:
      summary: "Fetches the capabilities of the token associated with the given token, on the given path."
      description: "When there is no access to the token, token accessor can be used to fetch the token's capabilities		on a given path."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              accessor:
                description: "Accessor of the token for which capabilities are being queried."
                type: string
              path:
                description: "(DEPRECATED) Path on which capabilities are being queried. Use 'paths' instead."
                type: array
                items:
                  type: string
              paths:
                description: "Paths on which capabilities are being queried."
                type: array
                items:
                  type: string
      responses:
        204:
          description: empty body
    
  /sys/capabilities-self:
    put:
      summary: "Fetches the capabilities of the given token on the given path."
      description: "Returns the capabilities of the client token on the path.		The path will be searched for a path match in all the policies associated with the client token."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              path:
                description: "(DEPRECATED) Path on which capabilities are being queried. Use 'paths' instead."
                type: array
                items:
                  type: string
              paths:
                description: "Paths on which capabilities are being queried."
                type: array
                items:
                  type: string
              token:
                description: "Token for which capabilities are being queried."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/config/auditing/request-headers:
    get:
      summary: "Lists the headers configured to be audited."
      description: "Returns a list of headers that have been configured to be audited."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/config/auditing/request-headers/{header}:
    delete:
      summary: "Configures the headers sent to the audit logs."
      description: "This path responds to the following HTTP methods.	GET /<name>		Returns the setting for the header with the given name.	POST /<name>		Enable auditing of the given header.	DELETE /<path>		Disable auditing of the given header."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: header
          description: ""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    get:
      summary: "Configures the headers sent to the audit logs."
      description: "This path responds to the following HTTP methods.	GET /<name>		Returns the setting for the header with the given name.	POST /<name>		Enable auditing of the given header.	DELETE /<path>		Disable auditing of the given header."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: header
          description: ""
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "Configures the headers sent to the audit logs."
      description: "This path responds to the following HTTP methods.	GET /<name>		Returns the setting for the header with the given name.	POST /<name>		Enable auditing of the given header.	DELETE /<path>		Disable auditing of the given header."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: header
          description: ""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              hmac:
                description: ""
                type: boolean
      responses:
        204:
          description: empty body
    
  /sys/config/cors:
    delete:
      summary: "This path responds to the following HTTP methods.    GET /        Returns the configuration of the CORS setting.    POST /        Sets the comma-separated list of origins that can make cross-origin requests.    DELETE /        Clears the CORS configuration and disables acceptance of CORS requests."
      description: "Configures or returns the current configuration of CORS settings."
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
    get:
      summary: "This path responds to the following HTTP methods.    GET /        Returns the configuration of the CORS setting.    POST /        Sets the comma-separated list of origins that can make cross-origin requests.    DELETE /        Clears the CORS configuration and disables acceptance of CORS requests."
      description: "Configures or returns the current configuration of CORS settings."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
    put:
      summary: "This path responds to the following HTTP methods.    GET /        Returns the configuration of the CORS setting.    POST /        Sets the comma-separated list of origins that can make cross-origin requests.    DELETE /        Clears the CORS configuration and disables acceptance of CORS requests."
      description: "Configures or returns the current configuration of CORS settings."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              allowed_headers:
                description: "A comma-separated string or array of strings indicating headers that are allowed on cross-origin requests."
                type: array
                items:
                  type: string
              allowed_origins:
                description: "A comma-separated string or array of strings indicating origins that may make cross-origin requests."
                type: array
                items:
                  type: string
              enable:
                description: "Enables or disables CORS headers on requests."
                type: boolean
      responses:
        204:
          description: empty body
    
  /sys/config/ui/headers/:
    get:
      summary: "This path responds to the following HTTP methods.    GET /<header>        Returns the header value.    POST /<header>        Sets the header value for the UI.    DELETE /<header>        Clears the header value for UI.            LIST /        List the headers configured for the UI."
      description: "Configures response headers that should be returned from the UI."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/config/ui/headers/{header}:
    delete:
      summary: "This path responds to the following HTTP methods.    GET /<header>        Returns the header value.    POST /<header>        Sets the header value for the UI.    DELETE /<header>        Clears the header value for UI.            LIST /        List the headers configured for the UI."
      description: "Configures response headers that should be returned from the UI."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: header
          description: "The name of the header."
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    get:
      summary: "This path responds to the following HTTP methods.    GET /<header>        Returns the header value.    POST /<header>        Sets the header value for the UI.    DELETE /<header>        Clears the header value for UI.            LIST /        List the headers configured for the UI."
      description: "Configures response headers that should be returned from the UI."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: header
          description: "The name of the header."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "This path responds to the following HTTP methods.    GET /<header>        Returns the header value.    POST /<header>        Sets the header value for the UI.    DELETE /<header>        Clears the header value for UI.            LIST /        List the headers configured for the UI."
      description: "Configures response headers that should be returned from the UI."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: header
          description: "The name of the header."
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              values:
                description: "The values to set the header."
                type: array
                items:
                  type: string
      responses:
        204:
          description: empty body
    
  /sys/generate-root/attempt:
    delete:
      summary: Cancels any in-progress root generation attempt.
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
    get:
      summary: Reads the configuration and process of the current root generation attempt.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
    "started": true,
    "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
    "progress": 1,
    "required": 3,
    "encoded_token": "",
    "pgp_fingerprint": "816938b8a29146fbe245dd29e7cbaf8e011db793",
    "complete": false
  }
    
    put:
      summary: Initializes a new root generation attempt
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              otp:
                description: Specifies a base64-encoded 16-byte value.
                type: string
              pgp_key:
                description: Specifies a base64-encoded PGP public key.
                type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
      "started": true,
      "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
      "progress": 1,
      "required": 3,
      "encoded_token": "",
      "pgp_fingerprint": "",
      "complete": false
  }
    
  /sys/generate-root/update:
    put:
      summary: Enter a single master key share to progress the root generation attempt.
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              key:
                description: Specifies a single master key share.
                type: string
              nonce:
                description: Specifies the nonce of the attempt.
                type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
    "started": true,
    "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
    "progress": 3,
    "required": 3,
    "pgp_fingerprint": "",
    "complete": true,
    "encoded_token": "FPzkNBvwNDeFh4SmGA8c+w=="
  }
    
  /sys/health:
    get:
      summary: Returns the health status of Vault.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: initialized, unsealed, and active
        429:
          description: unsealed and standby
        472:
          description: data recovery mode replication secondary and active
        501:
          description: not initialized
        503:
          description: sealed
    
    head:
      summary: Returns the health status of Vault.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: initialized, unsealed, and active
        429:
          description: unsealed and standby
        472:
          description: data recovery mode replication secondary and active
        501:
          description: not initialized
        503:
          description: sealed
    
  /sys/init:
    get:
      summary: Initializes or returns the initialization status of the Vault.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
          examples:
            application/json:
              {"initialized": true}
    
    put:
      summary: Initializes or returns the initialization status of the Vault.
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              pgp_keys:
                description: Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as secret_shares.
                type: array
                items:
                  type: string
              root_token_pgp_key:
                description: Specifies a PGP public key used to encrypt the initial root token. The key must be base64-encoded from its original binary representation.
                type: string
              secret_shares:
                description: Specifies the number of shares to split the master key into.
                type: number
              secret_threshold:
                description: Specifies the number of shares required to reconstruct the master key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as secret_shares.
                type: number
              stored_shares:
                description: Specifies the number of shares that should be encrypted by the HSM and stored for auto-unsealing. Currently must be the same as secret_shares.
                type: number
              recovery_pgp_keys:
                description: Specifies an array of PGP public keys used to encrypt the output recovery keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as recovery_shares.
                type: array
                items:
                  type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
      "keys": ["one", "two", "three"],
      "keys_base64": ["cR9No5cBC", "F3VLrkOo", "zIDSZNGv"],
      "root_token": "foo"
    }
    
  /sys/internal/ui/mounts:
    get:
      summary: ""
      description: ""
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/key-status:
    get:
      summary: "Provides information about the backend encryption key."
      description: "Provides the current backend encryption key term and installation time."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/leader:
    get:
      summary: Check the high availability status and current leader of Vault
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
            "ha_enabled": true,
            "is_self": false,
            "leader_address": "https://127.0.0.1:8200/",
            "leader_cluster_address": "https://127.0.0.1:8201/"
        }
    
  /sys/leases/lookup:
    put:
      summary: "View or list lease metadata."
      description: "This path responds to the following HTTP methods.    PUT /        Retrieve the metadata for the provided lease id.    LIST /<prefix>        Lists the leases for the named prefix."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/leases/lookup/:
    get:
      summary: "View or list lease metadata."
      description: "This path responds to the following HTTP methods.    PUT /        Retrieve the metadata for the provided lease id.    LIST /<prefix>        Lists the leases for the named prefix."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/leases/lookup/P<prefix>.+:
    get:
      summary: "View or list lease metadata."
      description: "This path responds to the following HTTP methods.    PUT /        Retrieve the metadata for the provided lease id.    LIST /<prefix>        Lists the leases for the named prefix."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/leases/renew:
    put:
      summary: "Renew a lease on a secret"
      description: "When a secret is read, it may optionally include a lease intervaland a boolean indicating if renew is possible. For secrets that supportlease renewal, this endpoint is used to extend the validity of thelease and to prevent an automatic revocation."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              increment:
                description: "The desired increment in seconds to the lease"
                type: number
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
              url_lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/leases/renew/{url_lease_id}:
    put:
      summary: "Renew a lease on a secret"
      description: "When a secret is read, it may optionally include a lease intervaland a boolean indicating if renew is possible. For secrets that supportlease renewal, this endpoint is used to extend the validity of thelease and to prevent an automatic revocation."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: url_lease_id
          description: "The lease identifier to renew. This is included with a lease."
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              increment:
                description: "The desired increment in seconds to the lease"
                type: number
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/leases/revoke:
    put:
      summary: "Revoke a leased secret immediately"
      description: "When a secret is generated with a lease, it is automatically revokedat the end of the lease period if not renewed. However, in some casesyou may want to force an immediate revocation. This endpoint can beused to revoke the secret with the given Lease ID."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
              url_lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/leases/revoke-force/{prefix}:
    put:
      summary: "Revoke all secrets generated in a given prefix, ignoring errors."
      description: "See the path help for 'revoke-prefix'; this behaves the same, except that itignores errors encountered during revocation. This can be used in certainrecovery situations; for instance, when you want to unmount a backend, but itis impossible to fix revocation errors and these errors prevent the unmountfrom proceeding. This is a DANGEROUS operation as it removes Vault's oversightof external secrets. Access to this prefix should be tightly controlled."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: prefix
          description: "The path to revoke keys under. Example: \"prod/aws/ops\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
  /sys/leases/revoke-prefix/{prefix}:
    put:
      summary: "Revoke all secrets generated in a given prefix"
      description: "Revokes all the secrets generated under a given mount prefix. Asan example, \"prod/aws/\" might be the AWS logical backend, and due toa change in the \"ops\" policy, we may want to invalidate all the secretsgenerated. We can do a revoke prefix at \"prod/aws/ops\" to revoke allthe ops secrets. This does a prefix match on the Lease IDs and revokesall matching leases."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: prefix
          description: "The path to revoke keys under. Example: \"prod/aws/ops\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
  /sys/leases/revoke/{url_lease_id}:
    put:
      summary: "Revoke a leased secret immediately"
      description: "When a secret is generated with a lease, it is automatically revokedat the end of the lease period if not renewed. However, in some casesyou may want to force an immediate revocation. This endpoint can beused to revoke the secret with the given Lease ID."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: url_lease_id
          description: "The lease identifier to renew. This is included with a lease."
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/leases/tidy:
    put:
      summary: "This endpoint performs cleanup tasks that can be run if certain errorconditions have occurred."
      description: "This endpoint performs cleanup tasks that can be run to clean up thelease entries after certain error conditions. Usually running this is notnecessary, and is only required if upgrade notes or support personnel suggestit."
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
  /sys/mounts:
    get:
      summary: "List the currently mounted backends."
      description: "This path responds to the following HTTP methods.    GET /        Lists all the mounted secret backends.    GET /<mount point>        Get information about the mount at the specified path.    POST /<mount point>        Mount a new secret backend to the mount point in the URL.    POST /<mount point>/tune        Tune configuration parameters for the given mount point.    DELETE /<mount point>        Unmount the specified mount point."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/mounts/{path}:
    delete:
      summary: "Mount a new backend at a new path."
      description: "Mount a backend at a new path. A backend can be mounted multiple times atmultiple paths in order to configure multiple separately configured backends.Example: you might have an AWS backend for the east coast, and one for thewest coast."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The path to mount to. Example: \"aws/east\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    put:
      summary: "Mount a new backend at a new path."
      description: "Mount a backend at a new path. A backend can be mounted multiple times atmultiple paths in order to configure multiple separately configured backends.Example: you might have an AWS backend for the east coast, and one for thewest coast."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The path to mount to. Example: \"aws/east\""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              config:
                description: "Configuration for this mount, such as default_lease_ttland max_lease_ttl."
                type: object
              description:
                description: "User-friendly description for this mount."
                type: string
              local:
                description: "Mark the mount as a local mount, which is not replicatedand is unaffected by replication."
                type: boolean
              options:
                description: "The options to pass into the backend. Should be a json object with string keys and values."
                type: string
              plugin_name:
                description: "Name of the plugin to mount based from the name registeredin the plugin catalog."
                type: string
              seal_wrap:
                description: "Whether to turn on seal wrapping for the mount."
                type: boolean
              type:
                description: "The type of the backend. Example: \"passthrough\""
                type: string
      responses:
        204:
          description: empty body
    
  /sys/mounts/{path}/tune:
    get:
      summary: "Tune backend configuration parameters for this mount."
      description: "Read and write the 'default-lease-ttl' and 'max-lease-ttl' values ofthe mount."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The path to mount to. Example: \"aws/east\""
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "Tune backend configuration parameters for this mount."
      description: "Read and write the 'default-lease-ttl' and 'max-lease-ttl' values ofthe mount."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: path
          description: "The path to mount to. Example: \"aws/east\""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              audit_non_hmac_request_keys:
                description: "The list of keys in the request data object that will not be HMAC'ed by audit devices."
                type: array
                items:
                  type: string
              audit_non_hmac_response_keys:
                description: "The list of keys in the response data object that will not be HMAC'ed by audit devices."
                type: array
                items:
                  type: string
              default_lease_ttl:
                description: "The default lease TTL for this mount."
                type: string
              description:
                description: "User-friendly description for this credential backend."
                type: string
              listing_visibility:
                description: "Determines the visibility of the mount in the UI-specific listing endpoint."
                type: string
              max_lease_ttl:
                description: "The max lease TTL for this mount."
                type: string
              options:
                description: "The options to pass into the backend. Should be a json object with string keys and values."
                type: string
              passthrough_request_headers:
                description: "A list of headers to whitelist and pass from the request to the backend."
                type: array
                items:
                  type: string
      responses:
        204:
          description: empty body
    
  /sys/plugins/catalog/:
    get:
      summary: "Configures the plugins known to vault"
      description: "This path responds to the following HTTP methods.		LIST /			Returns a list of names of configured plugins.		GET /<name>			Retrieve the metadata for the named plugin.		PUT /<name>			Add or update plugin.		DELETE /<name>			Delete the plugin with the given name."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/plugins/catalog/{name}:
    delete:
      summary: "Configures the plugins known to vault"
      description: "This path responds to the following HTTP methods.		LIST /			Returns a list of names of configured plugins.		GET /<name>			Retrieve the metadata for the named plugin.		PUT /<name>			Add or update plugin.		DELETE /<name>			Delete the plugin with the given name."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the plugin"
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    get:
      summary: "Configures the plugins known to vault"
      description: "This path responds to the following HTTP methods.		LIST /			Returns a list of names of configured plugins.		GET /<name>			Retrieve the metadata for the named plugin.		PUT /<name>			Add or update plugin.		DELETE /<name>			Delete the plugin with the given name."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the plugin"
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "Configures the plugins known to vault"
      description: "This path responds to the following HTTP methods.		LIST /			Returns a list of names of configured plugins.		GET /<name>			Retrieve the metadata for the named plugin.		PUT /<name>			Add or update plugin.		DELETE /<name>			Delete the plugin with the given name."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the plugin"
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              args:
                description: "The args passed to plugin command."
                type: array
                items:
                  type: string
              command:
                description: "The command used to start the plugin. Theexecutable defined in this command must exist in vault'splugin directory."
                type: string
              sha256:
                description: "The SHA256 sum of the executable used in thecommand field. This should be HEX encoded."
                type: string
              sha_256:
                description: "The SHA256 sum of the executable used in thecommand field. This should be HEX encoded."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/plugins/reload/backend:
    put:
      summary: "Reload mounts that use a particular backend plugin."
      description: "Reload mounts that use a particular backend plugin. Either the plugin name		or the desired plugin backend mounts must be provided, but not both. In the		case that the plugin name is provided, all mounted paths that use that plugin		backend will be reloaded."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              mounts:
                description: "The mount paths of the plugin backends to reload."
                type: array
                items:
                  type: string
              plugin:
                description: "The name of the plugin to reload, as registered in the plugin catalog."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/policies/acl/:
    get:
      summary: "List the configured access control policies."
      description: "This path responds to the following HTTP methods.    GET /        List the names of the configured access control policies.    GET /<name>        Retrieve the rules for the named policy.    PUT /<name>        Add or update a policy.    DELETE /<name>        Delete the policy with the given name."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/policies/acl/{name}:
    delete:
      summary: "Read, Modify, or Delete an access control policy."
      description: "Read the rules of an existing policy, create or update the rules of a policy,or delete a policy."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the policy. Example: \"ops\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    get:
      summary: "Read, Modify, or Delete an access control policy."
      description: "Read the rules of an existing policy, create or update the rules of a policy,or delete a policy."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the policy. Example: \"ops\""
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: "Read, Modify, or Delete an access control policy."
      description: "Read the rules of an existing policy, create or update the rules of a policy,or delete a policy."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the policy. Example: \"ops\""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              policy:
                description: "The rules of the policy. Either given in HCL or JSON format."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/policy/:
    get:
      summary: "List the configured access control policies."
      description: "This path responds to the following HTTP methods.    GET /        List the names of the configured access control policies.    GET /<name>        Retrieve the rules for the named policy.    PUT /<name>        Add or update a policy.    DELETE /<name>        Delete the policy with the given name."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/policy/{name}:
    delete:
      summary: ""
      description: ""
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the policy. Example: \"ops\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
    get:
      summary: ""
      description: ""
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the policy. Example: \"ops\""
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    
    put:
      summary: ""
      description: ""
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: name
          description: "The name of the policy. Example: \"ops\""
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              policy:
                description: "The rules of the policy. Either given in HCL or JSON format."
                type: string
              rules:
                description: "The rules of the policy. Either given in HCL or JSON format."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/rekey-recovery-key/backup:
    delete:
      summary: Deletes the backup copy of PGP-encrypted recovery key shares.
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
    get:
      summary: Return the backup copy of PGP-encrypted recovery key shares.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
    "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
    "keys": {
    "abcd1234": "..."
    }
  }
    
  /sys/rekey-recovery-key/init:
    delete:
      summary: Cancels any in-progress rekey.
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
    get:
      summary: Read the configuration and progress of the current rekey attempt.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
    "started": true,
    "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
    "t": 3,
    "n": 5,
    "progress": 1,
    "required": 3,
    "pgp_fingerprints": ["abcd1234"],
    "backup": true
  }
    
    put:
      summary: Initializes a new rekey attempt
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              secret_shares:
                description: Specifies the number of shares to split the recovery key into.
                type: number
              secret_threshold:
                description: Specifies the number of shares required to reconstruct the recovery key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as secret_shares.
                type: number
              pgp_keys:
                description: Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as secret_shares.
                type: array
                items:
                  type: string
              backup:
                description: Specifies if using PGP-encrypted keys, whether Vault should also store a plaintext backup of the PGP-encrypted keys.
                type: boolean
      responses:
        204:
          description: empty body
    
  /sys/rekey-recovery-key/update:
    put:
      summary: Enter a single master key share to progress the rekey of the Vault.
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              key:
                description: Specifies a single master key share.
                type: string
              nonce:
                description: Specifies the nonce of the rekey attempt.
                type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
    "complete": true,
    "keys": ["one", "two", "three"],
    "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
    "pgp_fingerprints": ["abcd1234"],
    "keys_base64": ["base64keyvalue"],
    "backup": true
  }
    
  /sys/rekey/backup:
    delete:
      summary: "Allows fetching or deleting the backup of the rotated unseal keys."
      description: "Allows fetching or deleting the backup of the rotated unseal keys."
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
    get:
      summary: "Allows fetching or deleting the backup of the rotated unseal keys."
      description: "Allows fetching or deleting the backup of the rotated unseal keys."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/rekey/init:
    delete:
      summary: Cancels any in-progress rekey.
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
    get:
      summary: Read the configuration and progress of the current rekey attempt.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
    "started": true,
    "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
    "t": 3,
    "n": 5,
    "progress": 1,
    "required": 3,
    "pgp_fingerprints": ["abcd1234"],
    "backup": true
  }
    
    put:
      summary: Initializes a new rekey attempt
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              secret_shares:
                description: Specifies the number of shares to split the master key into.
                type: number
              secret_threshold:
                description: Specifies the number of shares required to reconstruct the master key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as secret_shares.
                type: number
              pgp_keys:
                description: Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as secret_shares.
                type: array
                items:
                  type: string
              backup:
                description: Specifies if using PGP-encrypted keys, whether Vault should also store a plaintext backup of the PGP-encrypted keys.
                type: boolean
      responses:
        204:
          description: empty body
    
  /sys/rekey/recovery-key-backup:
    delete:
      summary: "Allows fetching or deleting the backup of the rotated unseal keys."
      description: "Allows fetching or deleting the backup of the rotated unseal keys."
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
    get:
      summary: "Allows fetching or deleting the backup of the rotated unseal keys."
      description: "Allows fetching or deleting the backup of the rotated unseal keys."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/rekey/update:
    put:
      summary: Enter a single master key share to progress the rekey of the Vault.
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              key:
                description: Specifies a single master key share.
                type: string
              nonce:
                description: Specifies the nonce of the rekey attempt.
                type: string
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
    "complete": true,
    "keys": ["one", "two", "three"],
    "nonce": "2dbd10f1-8528-6246-09e7-82b25b8aba63",
    "pgp_fingerprints": ["abcd1234"],
    "keys_base64": ["base64keyvalue"],
    "backup": true
  }
    
  /sys/remount:
    put:
      summary: "Move the mount point of an already-mounted backend."
      description: "This path responds to the following HTTP methods.    POST /sys/remount        Changes the mount point of an already-mounted backend."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              from:
                description: "The previous mount point."
                type: string
              to:
                description: "The new mount point."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/renew:
    put:
      summary: "Renew a lease on a secret"
      description: "When a secret is read, it may optionally include a lease intervaland a boolean indicating if renew is possible. For secrets that supportlease renewal, this endpoint is used to extend the validity of thelease and to prevent an automatic revocation."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              increment:
                description: "The desired increment in seconds to the lease"
                type: number
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
              url_lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/renew/{url_lease_id}:
    put:
      summary: "Renew a lease on a secret"
      description: "When a secret is read, it may optionally include a lease intervaland a boolean indicating if renew is possible. For secrets that supportlease renewal, this endpoint is used to extend the validity of thelease and to prevent an automatic revocation."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: url_lease_id
          description: "The lease identifier to renew. This is included with a lease."
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              increment:
                description: "The desired increment in seconds to the lease"
                type: number
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/replication/status:
    get:
      summary: ""
      description: ""
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
  /sys/revoke:
    put:
      summary: "Revoke a leased secret immediately"
      description: "When a secret is generated with a lease, it is automatically revokedat the end of the lease period if not renewed. However, in some casesyou may want to force an immediate revocation. This endpoint can beused to revoke the secret with the given Lease ID."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
              url_lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/revoke-force/{prefix}:
    put:
      summary: "Revoke all secrets generated in a given prefix, ignoring errors."
      description: "See the path help for 'revoke-prefix'; this behaves the same, except that itignores errors encountered during revocation. This can be used in certainrecovery situations; for instance, when you want to unmount a backend, but itis impossible to fix revocation errors and these errors prevent the unmountfrom proceeding. This is a DANGEROUS operation as it removes Vault's oversightof external secrets. Access to this prefix should be tightly controlled."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: prefix
          description: "The path to revoke keys under. Example: \"prod/aws/ops\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
  /sys/revoke-prefix/{prefix}:
    put:
      summary: "Revoke all secrets generated in a given prefix"
      description: "Revokes all the secrets generated under a given mount prefix. Asan example, \"prod/aws/\" might be the AWS logical backend, and due toa change in the \"ops\" policy, we may want to invalidate all the secretsgenerated. We can do a revoke prefix at \"prod/aws/ops\" to revoke allthe ops secrets. This does a prefix match on the Lease IDs and revokesall matching leases."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: prefix
          description: "The path to revoke keys under. Example: \"prod/aws/ops\""
          in: path
          type: string
          required: true
      responses:
        204:
          description: empty body
    
  /sys/revoke/{url_lease_id}:
    put:
      summary: "Revoke a leased secret immediately"
      description: "When a secret is generated with a lease, it is automatically revokedat the end of the lease period if not renewed. However, in some casesyou may want to force an immediate revocation. This endpoint can beused to revoke the secret with the given Lease ID."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: url_lease_id
          description: "The lease identifier to renew. This is included with a lease."
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              lease_id:
                description: "The lease identifier to renew. This is included with a lease."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/rotate:
    put:
      summary: "Rotates the backend encryption key used to persist data."
      description: "Rotate generates a new encryption key which is used to encrypt all		data going to the storage backend. The old encryption keys are kept so		that data encrypted using those keys can still be decrypted."
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
  /sys/seal:
    get:
      summary: Seals the Vault.
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
  /sys/seal-status:
    get:
      summary: Returns the seal status of the Vault.
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
        "type": "shamir",
        "sealed": false,
        "t": 3,
        "n": 5,
        "progress": 0,
        "version": "0.9.0",
        "cluster_name": "vault-cluster-d6ec3c7f",
        "cluster_id": "3e8b3fec-3749-e056-ba41-b62a63b997e8",
        "nonce": "ef05d55d-4d2c-c594-a5e8-55bc88604c24"
    }
    
  /sys/step-down:
    put:
      summary: Causes the node to give up active status.
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
  /sys/tools/hash:
    put:
      summary: "Generate a hash sum for input data"
      description: "Generates a hash sum of the given algorithm against the given input data."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              algorithm:
                description: "Algorithm to use (POST body parameter). Valid values are:			* sha2-224			* sha2-256			* sha2-384			* sha2-512			Defaults to \"sha2-256\"."
                type: string
              format:
                description: "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"hex\"."
                type: string
              input:
                description: "The base64-encoded input data"
                type: string
              urlalgorithm:
                description: "Algorithm to use (POST URL parameter)"
                type: string
      responses:
        204:
          description: empty body
    
  /sys/tools/hash/{urlalgorithm}:
    put:
      summary: "Generate a hash sum for input data"
      description: "Generates a hash sum of the given algorithm against the given input data."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: urlalgorithm
          description: "Algorithm to use (POST URL parameter)"
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              algorithm:
                description: "Algorithm to use (POST body parameter). Valid values are:			* sha2-224			* sha2-256			* sha2-384			* sha2-512			Defaults to \"sha2-256\"."
                type: string
              format:
                description: "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"hex\"."
                type: string
              input:
                description: "The base64-encoded input data"
                type: string
      responses:
        204:
          description: empty body
    
  /sys/tools/random:
    put:
      summary: "Generate random bytes"
      description: "This function can be used to generate high-entropy random bytes."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              bytes:
                description: "The number of bytes to generate (POST body parameter). Defaults to 32 (256 bits)."
                type: number
              format:
                description: "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"base64\"."
                type: string
              urlbytes:
                description: "The number of bytes to generate (POST URL parameter)"
                type: string
      responses:
        204:
          description: empty body
    
  /sys/tools/random/{urlbytes}:
    put:
      summary: "Generate random bytes"
      description: "This function can be used to generate high-entropy random bytes."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: urlbytes
          description: "The number of bytes to generate (POST URL parameter)"
          in: path
          type: string
          required: true
        - name: Data
          in: body
          schema:
            type: object
            properties:
              bytes:
                description: "The number of bytes to generate (POST body parameter). Defaults to 32 (256 bits)."
                type: number
              format:
                description: "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"base64\"."
                type: string
      responses:
        204:
          description: empty body
    
  /sys/unseal:
    put:
      summary: Unseals the Vault.
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              key:
                description: Specifies a single master key share. This is required unless reset is true.
                type: string
              reset:
                description: Specifies if previously-provided unseal keys are discarded and the unseal process is reset.
                type: boolean
      responses:
        200:
          description: OK
          examples:
            application/json:
              {
      "sealed": false,
      "t": 3,
      "n": 5,
      "progress": 0,
      "version": "0.6.2",
      "cluster_name": "vault-cluster-d6ec3c7f",
      "cluster_id": "3e8b3fec-3749-e056-ba41-b62a63b997e8"
    }
    
  /sys/wrapping/lookup:
    get:
      summary: "Looks up the properties of a response-wrapped token."
      description: "Returns the creation TTL and creation time of a response-wrapped token."
      produces:
        - application/json
      tags:
        - sys
      responses:
        200:
          description: OK
    
    put:
      summary: "Looks up the properties of a response-wrapped token."
      description: "Returns the creation TTL and creation time of a response-wrapped token."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              token:
                description: ""
                type: string
      responses:
        204:
          description: empty body
    
  /sys/wrapping/rewrap:
    put:
      summary: "Rotates a response-wrapped token."
      description: "Rotates a response-wrapped token; the output is a new token with the same		response wrapped inside and the same creation TTL. The original token is revoked."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              token:
                description: ""
                type: string
      responses:
        204:
          description: empty body
    
  /sys/wrapping/unwrap:
    put:
      summary: "Unwraps a response-wrapped token."
      description: "Unwraps a response-wrapped token. Unlike simply reading from cubbyhole/response,		this provides additional validation on the token, and rather than a JSON-escaped		string, the returned response is the exact same as the contained wrapped response."
      produces:
        - application/json
      tags:
        - sys
      parameters:
        - name: Data
          in: body
          schema:
            type: object
            properties:
              token:
                description: ""
                type: string
      responses:
        204:
          description: empty body
    
  /sys/wrapping/wrap:
    put:
      summary: "Response-wraps an arbitrary JSON object."
      description: "Round trips the given input data into a response-wrapped token."
      produces:
        - application/json
      tags:
        - sys
      responses:
        204:
          description: empty body
    
